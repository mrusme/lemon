package helpers

import (
	"bytes"
	"encoding/base64"
	"fmt"
	"image"
	"image/png"
	"io"
	"net/http"
	"os"
	"path/filepath"
)

const dummyImage = "iVBORw0KGgoAAAANSUhEUgAAAgAAAAIACAYAAAD0eNT6AAAKJ0lEQVR4nO3YPYocVxSA0f6zNtB7mNh0RwJHxiAYDF6KImXawUTazMAkjgyKenA8e5gNSOpuY6WV2EwJ6s13TnijW/W6mo+3vn68roD5HO+PPiqY2en2tPZO57V5TQ8DAPw3AgAAggQAAAQJAAAIEgAAECQAACBIAABAkAAAgCABAABBAgAAggQAAAQJAAAIEgAAECQAACBIAABAkAAAgCABAABBAgAAggQAAAQJAAAIEgAAECQAACBIAABAkAAAgCABAABBAgAAggQAAAQJAAAIEgAAECQAACBIAABAkAAAgCABAABBAgAAggQAAAQJAAAIEgAAECQAACBIAABAkAAAgCABAABBAgAAgnYOve14f7zW38HcHu4eh9n1p7eT0WK92b4fYs/t5ufJbKnOl7+H2fX41n/V3NwAAECQAACAIAEAAEECAACCBAAABAkAAAgSAAAQJAAAIEgAAECQAACAIAEAAEECAACCBAAABAkAAAgSAAAQJAAAIEgAAECQAACAIAEAAEECAACCBAAABAkAAAgSAAAQJAAAIEgAAECQAACAIAEAAEECAACCBAAABAkAAAgSAAAQJAAAIEgAAECQAACAIAEAAEECAACCBAAABAkAAAgSAAAQJAAAIEgAAEDQzqHP73h/vI6y68Pd42S2VNubYVYFZvbnX2P8V/36y2EyWyo3AAAQJAAAIEgAAECQAACAIAEAAEECAACCBAAABAkAAAgSAAAQJAAAIEgAAECQAACAIAEAAEECAACCBAAABAkAAAgSAAAQJAAAIEgAAECQAACAIAEAAEECAACCBAAABAkAAAgSAAAQJAAAIEgAAECQAACAIAEAAEECAACCBAAABAkAAAgSAAAQJAAAIEgAAECQAACAIAEAAEECAACCBAAABAkAAAgSAAAQJAAAIGg30iMf74/XyXCBHu4eR1jzu/V+MuKFLs/jvMHNQOf/5fxpMluiN6v3Q+y5Guid8mO4AQCAIAEAAEECAACCBAAABAkAAAgSAAAQJAAAIEgAAECQAACAIAEAAEECAACCBAAABAkAAAgSAAAQJAAAIEgAAECQAACAIAEAAEECAACCBAAABAkAAAgSAAAQJAAAIEgAAECQAACAIAEAAEECAACCBAAABAkAAAgSAAAQ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"

func GetIcon(urlFmt string, iconName string) (image.Image, string, error) {
	cacheDir, err := os.UserCacheDir()
	if err != nil {
		return nil, "", err
	}

	if err := os.MkdirAll(filepath.Join(cacheDir, "lemon"), 0755); err != nil {
		return nil, "", err
	}

	filePath := filepath.Join(cacheDir, "lemon", iconName+".png")
	_, err = os.Stat(filePath)
	if os.IsNotExist(err) {
		if err := DownloadIcon(urlFmt, iconName, filePath); err != nil {
			return nil, "", err
		}
	}

	file, err := os.Open(filePath)
	if err != nil {
		return nil, "", err
	}
	defer file.Close()

	img, err := png.Decode(file)
	if err != nil {
		return nil, "", err
	}

	return img, filePath, nil
}

func DownloadIcon(urlFmt string, iconName string, filePath string) error {
	file, err := os.Create(filePath)
	if err != nil {
		return err
	}
	defer file.Close()

	if urlFmt != "" {
		response, err := http.Get(fmt.Sprintf(urlFmt, iconName))
		if err != nil {
			return err
		}
		defer response.Body.Close()

		_, err = io.Copy(file, response.Body)
		if err != nil {
			return err
		}
	} else {
		dummyData, err := base64.StdEncoding.DecodeString(dummyImage)
		if err != nil {
			return err
		}

		reader := bytes.NewReader(dummyData)

		_, err = io.Copy(file, reader)
		if err != nil {
			return nil
		}
	}

	return nil
}
